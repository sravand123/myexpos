alias functionnum R1;
//open
if(functionnum==3) then
  alias filename R2;
  alias counter R3;
  alias inodeentry R4;
  alias openentry R5;

  counter = 0;
  while(counter<60)do
      if([INODE_TABLE+counter*16+1]==filename)then
          inodeentry = counter;
          break;
      endif;
     counter = counter +1;
  endwhile;
  if(counter == 60) then

    R0 =-1;
    return;
  endif;
  multipush(R1,R2,R3,R4); 
  R1 = 4;
  R2 = inodeentry;
  R3 = [SYSTEM_STATUS_TABLE+1];
  call RESOURCE_MANAGER;
  multipop(R1,R2,R3,R4);
  if(R0==-1)then

    return;
  endif;
  if([INODE_TABLE+inodeentry*16]==EXEC)then
          multipush(R1,R2,R3,R4); 
	  R1 = 5;
	  R2 = inodeentry;
	  R3 = [SYSTEM_STATUS_TABLE+1];
	  call RESOURCE_MANAGER;
	  multipop(R1,R2,R3,R4);

          R0=-1;
          return;
  endif;
  counter = 0;
  while(counter<32) do
    if([OPEN_FILE_TABLE+counter*4]==-1)then
        openentry = counter;
        break;
    endif;
  counter = counter+1;
  endwhile;
  if(counter==32)then
   multipush(R1,R2,R3,R4); 
	  R1 = 5;
	  R2 = inodeentry;
	  R3 = [SYSTEM_STATUS_TABLE+1];
	  call RESOURCE_MANAGER;
	  multipop(R1,R2,R3,R4);

          R0=-2;
          return;
  endif;
  if(filename == "root")then 
     [OPEN_FILE_TABLE+openentry*4]=INODE_ROOT;
  else
     if([FILE_STATUS_TABLE+inodeentry*4+1]==-1)then
        [FILE_STATUS_TABLE+inodeentry*4+1]=1;
     else
     [FILE_STATUS_TABLE+inodeentry*4+1]=[FILE_STATUS_TABLE+inodeentry*4+1]+1;
     endif;
   [OPEN_FILE_TABLE+openentry*4]=inodeentry;
  endif;
  [OPEN_FILE_TABLE+openentry*4+1] = 1;
  [OPEN_FILE_TABLE+openentry*4+2] = 0;
  multipush(R1,R2,R3,R4); 
	  R1 = 5;
	  R2 = inodeentry;
	  R3 = [SYSTEM_STATUS_TABLE+1];
	  call RESOURCE_MANAGER;
  multipop(R1,R2,R3,R4);
  R0=openentry;

  return;
endif;

//close
if(functionnum==4)then
   alias fileindex R2;
   alias inodeindex R3;
   alias openfiletable R4;
   openfiletable = OPEN_FILE_TABLE+fileindex*4;
   inodeindex = [openfiletable];
   [openfiletable+1] = [openfiletable+1]-1;
   if([openfiletable+1]==0)then
      [openfiletable+0]=-1;
      [openfiletable+1]=-1;
      [openfiletable+2]=-1;
      if([openfiletable]!=INODE_ROOT)then
         [FILE_STATUS_TABLE+inodeindex*4+1]=[FILE_STATUS_TABLE+inodeindex*4+1]-1;
      endif;
      if([FILE_STATUS_TABLE+inodeindex*4+1]==0)then
         [FILE_STATUS_TABLE+inodeindex*4+1]=-1;
      endif;
  endif;
  
   return;
endif;

//Buffered read and buffered write
if(functionnum == 2 || functionnum==1)then
   alias block R2;
   alias offset R3;
   alias word_address R4;
   alias buffernum R5;

   buffernum = block%4;
   multipush(R0,R1,R2,R3,R4,R5);
   R1 =1;
   R2 = buffernum;
   R3= [SYSTEM_STATUS_TABLE+1];
   call RESOURCE_MANAGER;
   multipop(R0,R1,R2,R3,R4,R5);


   if([BUFFER_TABLE+buffernum*4]!=block)then
      if([BUFFER_TABLE+buffernum*4+1]==1)then
         multipush(R0,R1,R2,R3,R4,R5);
         R1 =1;
         R3 = 71+buffernum;
         R4  =[BUFFER_TABLE+buffernum*4];
         R2 = [SYSTEM_STATUS_TABLE+1];
         call DEVICE_MANAGER;
         multipop(R0,R1,R2,R3,R4,R5);
         [BUFFER_TABLE+buffernum*4+1]=0;
      endif;
     multipush(R0,R1,R2,R3,R4,R5);
     R1 = 2;
     R3 = 71+buffernum;
     R4 = block;
     R2 = [SYSTEM_STATUS_TABLE+1];
      call DEVICE_MANAGER;
     multipop(R0,R1,R2,R3,R4,R5);
     [BUFFER_TABLE+buffernum*4] = block;
  
   endif;
   if(functionnum==2)then
    [word_address] = [(71+buffernum)*512+offset];
   else
    [(71+buffernum)*512+offset] = word_address;
    [BUFFER_TABLE+buffernum*4+1]=1;
    
   endif;
   multipush(R0,R1,R2,R3,R4,R5);
   R1 =2;
   R2 = buffernum;
   R3= [SYSTEM_STATUS_TABLE+1];
   call RESOURCE_MANAGER;
   multipop(R0,R1,R2,R3,R4,R5);
   return;
endif;
   
