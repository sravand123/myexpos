loadi(2, 15);
loadi(3, 16);
loadi(4, 17);
loadi(5, 18);
loadi(16,29);
loadi(17,30);
loadi(22,35);
loadi(23,36);
loadi(50,63);
loadi(51,64);
loadi(63,13);
loadi(64,14);
loadi(65,7);
loadi(66,8);
loadi(40,53);
loadi(41,54);
loadi(48,61);
loadi(49,62);
loadi(14,27);
loadi(15,28);
loadi(8,21);
loadi(9,22);
loadi(20,33);
loadi(21,34);
loadi(42,55);
loadi(43,56);
loadi(44,57);
loadi(45,58);
loadi(59,3);
loadi(60,4);
loadi(6,19);
loadi(7,20);
loadi(61,2);
loadi(18,31);
loadi(19,32);
loadi(24,37);
loadi(25,38);
loadi(32,45);
loadi(33,46);
loadi(28,41);
loadi(29,42);
loadi(30,43);
loadi(31,44);

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";



[PROCESS_TABLE +17] = 1;
[PROCESS_TABLE +20] = CREATED;
[PROCESS_TABLE +27] = 80;
[PROCESS_TABLE +28] = 0;
[PROCESS_TABLE +29] = 8*512;
[PROCESS_TABLE +30] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE +31] = 10;
[76*512] = [65 * 512 + 1];


[DISK_MAP_TABLE+2]=[PTBR+4];
[DISK_MAP_TABLE+3]=[PTBR+6];
[DISK_MAP_TABLE+4]=[PTBR+8];
[DISK_MAP_TABLE+5]=[PTBR+10];
[DISK_MAP_TABLE+6]=[PTBR+12];
[DISK_MAP_TABLE+7]=[PTBR+14];
[DISK_MAP_TABLE+8]=[PTBR+16];
[DISK_MAP_TABLE+9]=[PTBR+18];



alias counter R14;
counter = ((PTBR-PAGE_TABLE_BASE)/20)+1;
while(counter < MAX_PROC_NUM)do
      [PROCESS_TABLE+(counter*16)+4] = TERMINATED;
      counter = counter +1;
endwhile;                    

counter=0;
while(counter<76) do 
     [MEMORY_FREE_LIST+counter]=1;
counter =counter+1;
endwhile;
[MEMORY_FREE_LIST+0]=1;

alias freepages R15;
freepages=0;
counter=0;
while(counter<(PTBR-PAGE_TABLE_BASE)) do
     if([PAGE_TABLE_BASE+2*counter]>0) then
         [MEMORY_FREE_LIST+[PAGE_TABLE_BASE+2*counter]]=1;
     else
         [MEMORY_FREE_LIST+[PAGE_TABLE_BASE+2*counter]]=0;
     endif;
counter=counter+1;
endwhile;
counter=0;
[MEMORY_FREE_LIST+[PROCESS_TABLE+27]]=1;
while(counter<128) do
   if([MEMORY_FREE_LIST+counter]==0) then
      freepages=freepages+1;
   endif;
   counter=counter+1;
endwhile;

//Initialize per-process resource table                                                   
counter = 494;                                                            
while(counter < 512) do                                                   
    [[PROCESS_TABLE+27] * 512 + counter] = -1;                        
    [[PROCESS_TABLE+27] * 512 + counter + 1] = -1;                       
    counter = counter + 2;
endwhile;


counter=0;
while(counter<32) do 
     [SEMAPHORE_TABLE+counter*4+0]=-1;
     [SEMAPHORE_TABLE+counter*4+1]=0;
counter=counter+1;
endwhile;


[SYSTEM_STATUS_TABLE+2]=freepages;
[SYSTEM_STATUS_TABLE+3]=0;
[TERMINAL_STATUS_TABLE+0]=0;
[DISK_STATUS_TABLE+0]=0;



return;


loadi(54,67);
loadi(55,68);
loadi(69,11);
loadi(70,12);
SP = 82*512-1;
call MOD_7;
PTBR = PAGE_TABLE_BASE;
PTLR =10;


[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";



//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

[PROCESS_TABLE +1] = 0;
[PROCESS_TABLE +4] = RUNNING;
[PROCESS_TABLE +11] = 82;
[PROCESS_TABLE +12] = 0;
[PROCESS_TABLE +13] = 8*512;
[PROCESS_TABLE +14] = PAGE_TABLE_BASE;
[PROCESS_TABLE +15] = 10;
[SYSTEM_STATUS_TABLE + 1] = 0;
[81 * 512] = [69*512 + 1];
[MEMORY_FREE_LIST+81] =1;
[MEMORY_FREE_LIST+82] =1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 2; 
SP=8*512;

ireturn;




[rootfile+0] = filename;
  [rootfile+1] = 0;
  [rootfile+2] = DATA;
  [rootfile+3] = [USER_TABLE+2*[processtable+3]];
  [rootfile+4] = permission;
  counter =5;
  while(counter<8) do
       [rootfile+counter]=-1;
       counter = counter +1;
  endwhile;









