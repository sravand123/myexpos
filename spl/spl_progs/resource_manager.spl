alias functionNum R1;
alias currentPID R2;


//Acquire terminal
if(functionNum==8) then

while([TERMINAL_STATUS_TABLE+0]==1) do
     [PROCESS_TABLE+(currentPID)*16+4]=WAIT_TERMINAL;
     multipush(R1,R2);
     call MOD_5;
     multipop(R1,R2);
endwhile;
[TERMINAL_STATUS_TABLE+0]=1;
[TERMINAL_STATUS_TABLE+1]=currentPID;
return;
endif;
if(functionNum==9) then

  if(currentPID!=[TERMINAL_STATUS_TABLE+1]) then
     alias ret_val R0;
     ret_val = -1;
     return;
  else
      [TERMINAL_STATUS_TABLE+0]=0;
      alias counter R3;
      counter=0;
      while(counter<MAX_PROC_NUM) do
           if([PROCESS_TABLE+(counter)*16+4]==WAIT_TERMINAL) then
              [PROCESS_TABLE+(counter)*16+4]=READY;
           endif; 
      counter=counter+1;
      endwhile;
      alias ret_val R0;
      ret_val =0;
      return;
  endif;
endif;


//Acquire Disk        
if(functionNum==3) then
   while([DISK_STATUS_TABLE+0]==1) do
        [PROCESS_TABLE+(currentPID)*16+4]=WAIT_DISK;
        multipush(R1,R2);
        call MOD_5;
        multipop(R1,R2);
   endwhile;
   [DISK_STATUS_TABLE+4]=currentPID;
   [DISK_STATUS_TABLE+0]=1;
   return;
endif;

//Acquire semaphore
if(functionNum==6)then
   alias counter R3;
   counter = 0;
   while(counter<32) do 
        if([SEMAPHORE_TABLE+counter*4+1]==0) then
            R0 = counter;
            [SEMAPHORE_TABLE+counter*4+1]=1;
            [SEMAPHORE_TABLE+counter*4+0]=currentPID;
            break;
        endif;
   counter=counter+1;
   endwhile;
   if(counter==32)then
     R0=-1;
   endif;
   return;
endif;
//Release semaphore
if(functionNum==7)then
    alias semindex R4;
    alias pid R5;
    semindex = R2;
    pid = R3;
    if([SEMAPHORE_TABLE+semindex*4+0]==pid) then
       [SEMAPHORE_TABLE+semindex*4+0]=-1;
    alias counter R6;
    counter=0;
    while(counter<16)do
         if([PROCESS_TABLE+counter*16+4]==WAIT_SEMAPHORE && [PROCESS_TABLE+counter*16+5]==semindex) then
           [PROCESS_TABLE+counter*16+4]=READY;
      
         endif;
    counter=counter+1;
    endwhile;
    endif;
    [SEMAPHORE_TABLE+semindex*4+1]=[SEMAPHORE_TABLE+semindex*4+1]-1;
    return;
endif;   


//Acquire inode
if(functionNum==4)then
   alias inodeindex R2;
   alias pid R3;
   while([FILE_STATUS_TABLE+inodeindex*4]!=-1)do
         [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 4]=WAIT_FILE;
         [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 5]=inodeindex;
         multipush(R0,R1,R2,R3);
         call MOD_5;
         multipop(R0,R1,R2,R3);
   endwhile;
  if([INODE_TABLE+inodeindex*16]==-1) then
      R0=-1;
      return;
  endif;
  [FILE_STATUS_TABLE+inodeindex*4]=pid;
  R0=0;
  return;
endif;

//release inode
if(functionNum==5)then
   alias inodeindex R2;

   alias pid R3;
   if(pid != [FILE_STATUS_TABLE+inodeindex*4])then
      R0=-1;
      return;
   endif;
   [FILE_STATUS_TABLE+inodeindex*4]=-1;
   alias counter R4;
   counter = 0;
   while(counter<16) do
     if([PROCESS_TABLE+counter*16+4]==WAIT_FILE && [PROCESS_TABLE + counter*16 + 5] == inodeindex) then
        [PROCESS_TABLE+counter*16+4] =READY;
     endif;
   counter = counter +1;
  endwhile;
  R0 = 0;
  return;
endif; 

//Acquire Buffer

if(functionNum==1)then

   alias buffernum R2;
   alias pid  R3;

   while([BUFFER_TABLE+buffernum*4+2]!=-1)do
        [PROCESS_TABLE+pid*16+4]=WAIT_BUFFER;
        [PROCESS_TABLE+pid*16+4]=buffernum;

        multipush(R1,R2,R3);
        call MOD_5;
        multipop(R1,R2,R3);
   endwhile;
   [BUFFER_TABLE+buffernum*4+2]=pid;
   R0=0;
   return;
endif;


//Release Buffer
if(functionNum==2) then

   alias buffernum R2;
   alias pid  R3;
   alias counter R4;
   if([BUFFER_TABLE+buffernum*4+2]!=pid)then
      R0=-1;
      return;
   endif;
   [BUFFER_TABLE+buffernum*4+2]=-1;
   counter = 0;
   while(counter<16)do
   if([PROCESS_TABLE+counter*16+4]==WAIT_BUFFER && [PROCESS_TABLE+counter*16+5]==buffernum)then
      [PROCESS_TABLE+counter*16+4]=READY;
   endif;
   counter = counter+1;
   endwhile;
   return;
endif;
            
