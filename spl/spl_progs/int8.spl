
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 9] =8;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13] =SP;
SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 11]*512 -1;
alias userSP R0;
userSP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];


alias newpid R2;

multipush(R0);
R1=1;
call PROCESS_MANAGER;
newpid =R0;
multipop(R0);

if(newpid==-1) then
  [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 9] =0;
  SP =[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
  [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512]=-1;
  ireturn;
endif;



if([PTBR+4]==-1) then
   multipush(R0,R2);
   R1=1;
   call MEMORY_MANAGER;
   [PTBR+4]=R0;
   [PTBR+5]="1110";
   multipop(R0,R2);
endif;
if([PTBR+6]==-1) then
   multipush(R0,R2);
   R1=1;
   call MEMORY_MANAGER;
   [PTBR+6]=R0;
   [PTBR+7]="1110";
   multipop(R0,R2);
endif;

alias newPID R5;
newPID=newpid;
multipush(R0,R1,R2,R3,R5);
R1=1;
alias pid R2;
pid  = newPID;
call MOD_2;
[PROCESS_TABLE+pid*16+11]=R0;

multipop(R0,R1,R2,R3,R5);

alias newprocesstable R3;
alias processtable R12;
newprocesstable = PROCESS_TABLE+ newPID*16;
processtable = PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;

[newprocesstable + 3] = [processtable+3];
[newprocesstable + 6] = [processtable+6];
[newprocesstable + 10] = [processtable+10];
[newprocesstable + 7] = [processtable+7];
[newprocesstable + 13] = [processtable+13];
[newprocesstable + 0]=0;
[newprocesstable + 9]=0;
[newprocesstable + 12]=0;
[newprocesstable + 4]=CREATED;
[newprocesstable + 2]=[SYSTEM_STATUS_TABLE+1];



alias counter R6;
alias newperprocesstable R8;
alias parentperprocess R9;
parentperprocess = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16+11]*512+496;
newperprocesstable = [newprocesstable+11]*512+496;
counter = 0;
while(counter<8) do
     [newperprocesstable+2*counter] = [parentperprocess+2*counter];
     [newperprocesstable+2*counter+1] = [parentperprocess+2*counter+1];
     alias k R10;
     k = [parentperprocess+2*counter+1]*4+1;
     if([parentperprocess+2*counter]==SEMAPHORE)then
         [SEMAPHORE_TABLE+k]= [SEMAPHORE_TABLE+k]+1;
     endif;
     if([parentperprocess+2*counter]==FILE)then
         [OPEN_FILE_TABLE+k] = [OPEN_FILE_TABLE+k]+1;
     endif;
    counter=counter+1;
endwhile;
     

counter=2;
while(counter<10) do
   [DISK_MAP_TABLE+newPID*10+counter]=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+counter];
   counter=counter+1;
endwhile;

counter=0;
while(counter<16) do
    [PAGE_TABLE_BASE+newPID*20+counter]=[PTBR+counter];
    [MEMORY_FREE_LIST+[PTBR+counter]]=[MEMORY_FREE_LIST+[PTBR+counter]]+1;
    [PAGE_TABLE_BASE+newPID*20+counter+1]=[PTBR+counter+1];
    counter=counter+2;
endwhile;
multipush(R0,R1,R2,R3,R5);
R1=1;
R2  = newPID;
call MOD_2;
[PAGE_TABLE_BASE+R2*20+16]=R0;
[PAGE_TABLE_BASE+R2*20+17]=[PTBR+17];
multipop(R0,R1,R2,R3,R5);

multipush(R0,R1,R2,R3,R5);
R1=1;
R2  = newPID;
call MOD_2;
[PAGE_TABLE_BASE+R2*20+18]=R0;
[PAGE_TABLE_BASE+R2*20+19]=[PTBR+19];
multipop(R0,R1,R2,R3,R5);

counter = 0;

while(counter<512)do
    [[PAGE_TABLE_BASE+newPID*20+16]*512+counter]=[[PTBR+16]*512+counter];
    [[PAGE_TABLE_BASE+newPID*20+18]*512+counter]=[[PTBR+18]*512+counter];
    counter=counter+1;
endwhile;


[[PROCESS_TABLE+newPID*16 + 11]*512]=BP;

[[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20 + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512]=newPID;

[[PAGE_TABLE_BASE+newPID*20 + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512]=0;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 9] =0;
SP =[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];


ireturn;


