[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=9;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
alias userSP R0;
alias pid R4;
pid= [SYSTEM_STATUS_TABLE+1];

userSP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];

alias filename R1;
alias i R6;
i=0;



filename = [[PTBR +2*(userSP-4)/512]*512+(userSP-4)%512];
while(i<MAX_FILE_NUM) do
   if(([INODE_TABLE+16*i+1] == filename) &&([INODE_TABLE+16*i]==EXEC)) then
       break;
   endif;
i=i+1;
endwhile;



if(i==MAX_FILE_NUM) then
   alias physicalAddrRetVal R2;
   physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
   [physicalAddrRetVal] = -1;
   [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
   SP=[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
   ireturn;
    
else
   alias index R3;
   index=i;

   multipush(R0,R1,R2,R3,R4,R6);
   alias functionNum R1;
   functionNum=3;
   alias PID R2;
   PID = [SYSTEM_STATUS_TABLE+1];
   call MOD_1;
   multipop(R0,R1,R2,R3,R4,R6);   
   alias userareapage R5;
   userareapage=[PROCESS_TABLE+pid*16+11];
   [MEMORY_FREE_LIST+userareapage]=[MEMORY_FREE_LIST+userareapage]+1;
   [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
    
   SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
   alias perProcRecOff R7;                                                      
   perProcRecOff = 496;                                                           

while(perProcRecOff < 512) do                                                   

    [userareapage * 512 + perProcRecOff] = -1;                           
    [userareapage * 512 + perProcRecOff + 1] = -1;                       
    perProcRecOff = perProcRecOff + 2;

endwhile;


   [PROCESS_TABLE+pid*16+7]=index;
     [PROCESS_TABLE+pid*16+1]=pid;
   [PROCESS_TABLE+pid*16+4]=RUNNING;
   [PAGE_TABLE_BASE+pid*20+0] = 63;
   [PAGE_TABLE_BASE+pid*20+1] = "0100";
   [PAGE_TABLE_BASE+pid*20+2] = 64;
   [PAGE_TABLE_BASE+pid*20+3] = "0100";
   multipush(R0,R1,R2,R3,R4,R5,R6,R7);
   alias functionnum R1;
   functionnum=1;
   alias PId R2;
   alias retval R0;
   PId = [SYSTEM_STATUS_TABLE+1];
   call MOD_2;
   [PAGE_TABLE_BASE+pid*20+16] =retval;
   [PAGE_TABLE_BASE+pid*20+17] = "0110";
   

   functionnum=1;
   PId = [SYSTEM_STATUS_TABLE+1];

   call MOD_2;
   [PAGE_TABLE_BASE+pid*20+18] = retval;
   [PAGE_TABLE_BASE+pid*20+19] = "0110";
          


   [PAGE_TABLE_BASE+pid*20+4]=-1;
   [PAGE_TABLE_BASE+pid*20+5] = "0000";

      

   [PAGE_TABLE_BASE+pid*20+6] =-1;
   [PAGE_TABLE_BASE+pid*20+7] = "0000";
   
   
   functionnum=5;
   alias block R2;
   block =[INODE_TABLE+index*16+8];
   call MOD_2;

   [PTBR+8]=retval;
   [PTBR+9]="1100";
   [PTBR+10]=-1;
   [PTBR+11]="0000";
   [PTBR+12]=-1;
   [PTBR+13]="0000";
   [PTBR+14]=-1;
   [PTBR+15]="0000";
   multipop(R0,R1,R2,R3,R4,R5,R6,R7);

   [DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10 + 2]=-1;
   [DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10 + 3]=-1;
   [DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10 + 4]=[INODE_TABLE+index*16+8];
   [DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10 + 5]=[INODE_TABLE+index*16+9];
   [DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10 + 6]=[INODE_TABLE+index*16+10];
   [DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10 + 7]=[INODE_TABLE+index*16+11];
   [DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10 + 8]=-1; 
   [DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10 + 9]=-1; 

   
endif;

[[PAGE_TABLE_BASE+pid*20+16]*512]=[[PAGE_TABLE_BASE+pid*20+8]*512+1];
SP =8*512 ;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;
