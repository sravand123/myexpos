[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=7;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 11] * 512 - 1;
alias userSP R0;
userSP =[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 13];
alias fileDescriptor R1;
alias physicalAddrRetVal R2;
alias processtable R3;

fileDescriptor=[[PTBR + 2 * ((userSP - 4)/ 512)]*512+(userSP - 4) % 512];
physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
processtable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;
if (fileDescriptor ==-1 )then 
	multipush(R0,R1,R2,R3);
        R1=4;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 =  [[PTBR + 2 * (userSP - 3)/ 512] * 512 + (userSP - 3) % 512];
        call MOD_4;
        multipop(R0,R1,R2,R3);
	[physicalAddrRetVal] = 0;
        SP = userSP;
        [processtable + 9] = 0;
        ireturn;

else   
       if(fileDescriptor>=0 && fileDescriptor<=7) then
        alias perprocesstable R4;
        alias openentry R5;
        alias inodeentry R6;
        alias lseek R7;
        alias word_address R8;
        word_address = [[PTBR + 2 * (userSP - 3)/ 512] * 512 + (userSP - 3) % 512];
        word_address = [PTBR+2*(word_address/512)]*512+(word_address%512);
        perprocesstable = [processtable+11]*512+496;
        if([perprocesstable+fileDescriptor*2]!=-1 && [perprocesstable+fileDescriptor*2]!=FILE )then
            [physicalAddrRetVal] = -1;
            SP = userSP;
            [processtable + 9] = 0;
            ireturn;
        endif;
        openentry = [perprocesstable+fileDescriptor*2+1];
        inodeentry = [OPEN_FILE_TABLE+openentry*4];

        lseek = OPEN_FILE_TABLE+openentry*4+2;


        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
        R1 = 4;
        R2 = inodeentry;
        R3 = [SYSTEM_STATUS_TABLE+1];
        call RESOURCE_MANAGER;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);

        if([OPEN_FILE_TABLE+openentry*4]==INODE_ROOT)then
           if([lseek]==480)then
               multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
                R1 = 5;
                R2 = inodeentry;
                R3 = [SYSTEM_STATUS_TABLE+1];
                call RESOURCE_MANAGER;
               multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
               [physicalAddrRetVal] = -2;
               SP = userSP;
               [processtable + 9] = 0;
               ireturn;
           endif;
           [word_address] = [ROOT_FILE +[lseek]];
           [lseek]=[lseek]+1;
        else
            if([lseek]>=[INODE_TABLE+inodeentry*16+2])then
               multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
                R1 = 5;
                R2 = inodeentry;
                R3 = [SYSTEM_STATUS_TABLE+1];
                call RESOURCE_MANAGER;
               multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
               [physicalAddrRetVal] = -2;
               SP = userSP;
               [processtable + 9] = 0;
               ireturn;
            endif;
        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
        R1 = 2;
        R2 = [INODE_TABLE+inodeentry*16+ 8+[lseek]/512];

        R3 = [lseek]%512;
        R4 = word_address;

        call FILE_MANAGER;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
        [lseek]=[lseek]+1;
         
       endif;
              multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
                R1 = 5;
                R2 = inodeentry;
                R3 = [SYSTEM_STATUS_TABLE+1];
                call RESOURCE_MANAGER;
               multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    else
        SP = userSP;
        [processtable + 9] = 0;
        ireturn;
    endif;
endif;
SP = userSP;
[processtable + 9] = 0;
ireturn;
