alias functionNum R1;
alias pid R2;
alias userarea R3;

//free user area page
if(functionNum==2) then
   alias perprocesstable R4;
   perprocesstable = [PROCESS_TABLE+pid*16+11]*512+496;
   alias counter R5; 
   counter =  0;
   while(counter<8) do
       if([perprocesstable+2*counter+1]!=-1 && [perprocesstable+2*counter+0]==SEMAPHORE) then
          multipush(R1,R2,R3,R4,R5);
          R1= 7;
          R3 = pid; 
          R2= [perprocesstable+2*counter+1];
          call RESOURCE_MANAGER;
          multipop(R1,R2,R3,R4,R5);
       endif;
   counter=counter+1;
   endwhile;
   counter =  0;
   while(counter<8) do
       if([perprocesstable+2*counter+1]!=-1 && [perprocesstable+2*counter+0]==FILE) then
          multipush(R1,R2,R3,R4,R5);
          R1= 4;
          R2= [perprocesstable+2*counter+1];
          call FILE_MANAGER;
          multipop(R1,R2,R3,R4,R5);
       endif;
   counter=counter+1;
   endwhile;
   userarea= [PROCESS_TABLE+pid*16+11];
   multipush(R1,R2,R3);
   functionNum=2;
   alias page R2;
   page=userarea;
   call MOD_2;
   multipop(R1,R2,R3);
   return;
endif;

//Exit process
if(functionNum==3) then
   alias counter R4;
   counter=0;
   if([PROCESS_TABLE+pid*16+9]!=9)then
   while(counter<16) do 
     if(([PROCESS_TABLE+counter*16+4]== WAIT_PROCESS) && ([PROCESS_TABLE+counter*16+5]==pid)) then
        [PROCESS_TABLE+counter*16+4]=READY;
     endif;
   counter=counter+1;
   endwhile;
  counter=0;
   while(counter<16) do 
     if([PROCESS_TABLE+counter*16+2]==pid) then
        [PROCESS_TABLE+counter*16+2]=-1;
     endif;
   counter=counter+1;
   endwhile;
   endif;
   multipush(R1,R2,R3);
   functionNum = 4;
   call PROCESS_MANAGER;
   multipop(R1,R2,R3);
   multipush(R1,R2,R3);
   functionNum=2;
   call PROCESS_MANAGER;
   multipop(R1,R2,R3);
   [PROCESS_TABLE+pid*16+4]=TERMINATED;
   return;
endif;

//Free page table
if(functionNum==4) then 
   [PAGE_TABLE_BASE+pid*20+0]=-1;
   [PAGE_TABLE_BASE+pid*20+1]="0000";
   [PAGE_TABLE_BASE+pid*20+2]=-1;
   [PAGE_TABLE_BASE+pid*20+3]="0000";
   alias count R0;
   count=2;
   while(count<10) do
      if([PAGE_TABLE_BASE+pid*20+2*count]!=-1) then 
         multipush(R0,R1,R2,R3);
         R2 = [PAGE_TABLE_BASE+pid*20+2*count];
         R1 = 2;
         call MOD_2;
         multipop(R0,R1,R2,R3);
         [PAGE_TABLE_BASE+pid*20+2*count]=-1;
         [PAGE_TABLE_BASE+pid*20+2*count+1]="0000";
      endif;
  count=count+1;
  endwhile;
  count=2;
  while(count<=9) do
   if((count <4 || count >=8) && ([DISK_MAP_TABLE+pid*10+count]>0) ) then
        multipush(R0,R1,R2,R3);
        R1=4;
        R3=pid;
        R2 = [DISK_MAP_TABLE+pid*10+count];
        call MOD_2;
        multipop(R0,R1,R2,R3);
   endif;
   [DISK_MAP_TABLE+pid*10+count]=-1;
   count=count+1; 
  endwhile; 
  return;
endif;


//Get pcb entry
if(functionNum==1) then
 alias counter R1;
 counter=0;
 while(counter<16) do
   if([PROCESS_TABLE+counter*16 +4]==TERMINATED) then
      R0 = counter;
      [PROCESS_TABLE+ counter*16+4]=ALLOCATED;
      [PROCESS_TABLE+ counter*16+14]=PAGE_TABLE_BASE+counter*20;
      [PROCESS_TABLE+ counter*16+15]=10;
      break;
   endif;
 counter=counter+1;
 endwhile;
 if(counter==16) then
   R0=-1;
 endif;
 return;
endif; 


//kill all

if(functionNum==5) then
   alias counter R4;
   alias pid R2;
   counter = 0;
   while(counter<60)do
    if([INODE_TABLE+counter*16+0]!=-1)then

      multipush(R1,R2,R4);
       R1 = 4;
       R3 = pid;
       R2 = counter;
       call RESOURCE_MANAGER;
      multipop(R1,R2,R4); 
   endif;
   counter = counter+1;
   endwhile;
  counter = 2;
  while(counter<16)do
    if(pid!=counter && [PROCESS_TABLE+counter*16+4]!=TERMINATED)then
       multipush(R1,R2,R4);      
       R1=3;
       R2 =pid;
       call PROCESS_MANAGER;
       multipop(R1,R2,R4);
    endif;
    counter = counter+1;
  endwhile;
  counter = 0;
   while(counter<60)do
    if([INODE_TABLE+counter*16+0]!=-1)then
      multipush(R1,R2,R4);
       R1 = 5;
       R3 = pid;
       R2 = counter;
       call RESOURCE_MANAGER;
      multipop(R1,R2,R4); 
   endif;
   counter = counter+1;
   endwhile;
   return;
endif;
    
    
   

   

   
